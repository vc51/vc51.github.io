<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多种网络营销方式汇总</title>
    <link href="/2021/03/15/%E5%A4%9A%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%90%A5%E9%94%80%E6%96%B9%E5%BC%8F%E6%B1%87/"/>
    <url>/2021/03/15/%E5%A4%9A%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%90%A5%E9%94%80%E6%96%B9%E5%BC%8F%E6%B1%87/</url>
    
    <content type="html"><![CDATA[<div align='center' ><font size='5'color='red'>多种网络营销方式汇总</font></div><p>现如今，众多的<code>网络营销</code>方式层出不穷，想必大家在做网络营销的时候，也一定都有一套自己的方法，那么我今天总结几点 QQ 营销的方法和其他营销方法的对比和介绍。</p><p>1、通过 QQ 号和 QQ 空间的推广：用 QQ 号来做推广，首先你要申请一些小号，不断的加人，并利用一切可利用的资源，再加上 QQ 好友群发软件，群发你的产品信息或促销信息。并在你的 QQ 空间里面，发表你的促销信息，这才你的好友也就可以看到你发表的信息了，因为这些信息就可以通过小信息传送的。</p><p>2、QQ 广播推广：QQ 广播这个新鲜的词语，好像在我们生活当中有广播收音机或其它会发出声音的大喇叭一样，让大家知道我们是做什么，所以我们可以通过这个 QQ 广播来传播一下我们发的信息，例如促销信息，产品的描述，店铺的地址都是可以的，不过在这之前，你要每天不断的加人，就是不断的收听别人，这样别人也会收听你的。</p><p>3、QQ 群推广：这个方法蛮好用的<code>网络推广</code>方式，因为这些 QQ 群你必须加入关于你的产品有关的 QQ 群，不是乱加啊，所以你加入的群都是跟你的产品有关的，这样大家集在同一个群里都是有需要这方面的人，说不定也有批发的哦，这样你一下子就可以批发出去了哈，可以利用搜牌 QQ 群发软件，<a href="http://www.qunfa.so,全自动的./">http://www.qunfa.so,全自动的。</a></p><p>4、QQ 论坛推广：在这里可以发表你的店铺地址和促销产品的信息，跟一些 SNS 操作方法一样，就看你自己怎么去写信息了。</p><p>5、阿里妈妈推广：这个阿里妈妈推广，我相信大家并不陌生，它是提供给淘宝的卖家更多的推广机会，覆盖互联网各类购物人群，合理掌控推广成本； 自由挑选投放站点，针对网站定向投放，锁定固定目标群体。 无需竞争，无需等待，独享广告投放时间。 包时广告投放，无论点击次数和展现数量，均只需支付固定的费用.</p><p>6、发帖推广或回贴：这个方法我相信大家都试过，就是每天跟一些精华贴，使自己的店铺旺旺集点人气，多方面了，让更多的人知道你，所不定有人对你感兴趣，就到你的店里看一下并产生交易哦。</p><p>7、博客营销推广：博客我相信大家每个人都有的吧，像网易 163,QQ 微博，新浪等一些大的门户网站都有自己的博客，大家可以去申请一下，利用博客来推广，首先你也是要不断的加好友，每天坚持转热门贴和发表几遍文章，并通过转载，推送，同步共享等这些可以利用的资源，使自己发表的贴让更多的人知道，文章怎么写，我就不说了。</p><p>8、线下媒体推广：地铁大灯箱广告、公交站台大牌广告、楼宇、分众传媒、电台广播等</p><p>9、超级卖霸推广：超级卖霸是将卖家产品集中在一起，以专题活动的形式进行集中展示，并整合淘宝优质广告资源进行强力推广，帮助所有卖家更大范围更强力度更有效地集中推广商品以及店铺。</p><p>集中展示：以主题活动的形式将宝贝集中在一起展示，形成主题卖场超高流量：利用淘宝、阿里旺旺、阿里妈妈三大平台优势资源，站内外合力推广。</p><p>10、搜索引擎推广：如今的新手站长，最热衷的就是这个短平快的方法。搜索网店的功能就是整合网络资源，给网民找到最适合的网店内容，给其他网店带去流量是其意想不到的副作用。很多站长类网店的网店推广栏目，似乎都变成 seo 专区了。seo 的最好方法，就是网页代码规范、访问速度快、内容独特少重复，对网民有用，而且具有唯一性。</p><p>11、淘宝分享推广：写出你自己分享的产品的方法和心得，这样你的好友都会看到你发表的心得，、。</p><p>12、淘宝帮派推广：多多参加大的帮派活动，并发贴和加贴，和抢广告位。</p><p>13、淘宝江湖推广：江湖推广跟上面的分享差不多，但这个也是一种推广方法，希大家可以自己多想。。</p><p>14、淘宝客推广：“淘宝客推广”是专为淘宝卖家提供淘宝网以外的流量和人力，帮助推广商品，成交后卖家才支付佣金报酬。最小成本：展示、点击、推广全都免费，只在成交后支付佣金。并能随时调整佣金比例，灵活控制支出成本。最大资源：拥有互联网上更多流量、更多人群帮助推广售卖，让你的买家无处不在！</p><p>15、淘代码推广：淘代码推广是一种全新的线下媒体推广方式，帮助您将自己的商品推广到报刊杂志、电视、DM 等媒体上。淘代码推广渠道覆盖了更广泛的线下购买人群、为您提供了品牌推广的新途径。线下推广效果持续时间久、参与门槛低、有多种媒体供您自助选择，还等什么，快来参加！</p><p>16、淘宝社区推广：淘宝的社区分为好多模块，大家都可以在每一个社区里面参加活动和发贴，</p><p>17、论坛推广：论坛推广大家可以去一些大的论坛网站去发表你的软文，你也可以参论坛的活动或报名成为论坛的管理员之类的，这样方便你自己发表的文章加精置顶。</p><p>本文转载自(<a href="https://www.365webcall.com/tui/filelist/wangzhantuiguang-384.htm">https://www.365webcall.com/tui/filelist/wangzhantuiguang-384.htm</a>)</p>]]></content>
    
    
    <categories>
      
      <category>网络营销</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络营销</tag>
      
      <tag>网络推广</tag>
      
      <tag>网站优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 基础语法</title>
    <link href="/2021/03/11/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/03/11/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h1><p>编码<br>默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：</p><div class="hljs code-wrapper"><pre><code># -*- coding: cp-1252 -*-</code></pre></div><p>上述定义允许在源文件中使用 Windows-1252 字符集中的字符编码，对应适合语言为保加利亚语、白罗斯语、马其顿语、俄语、塞尔维亚语。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>第一个字符必须是字母表中字母或下划线 _ 。<br>标识符的其他的部分由字母、数字和下划线组成。<br>标识符对大小写敏感。<br>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><h2 id="python-保留字"><a href="#python-保留字" class="headerlink" title="python 保留字"></a>python 保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><blockquote><blockquote><blockquote><p>import keyword<br>keyword.kwlist<br>[‘False’, ‘None’, ‘True’, ‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘nonlocal’, ‘not’, ‘or’, ‘pass’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</p></blockquote></blockquote></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Python 中单行注释以 # 开头，实例如下：</p><p>实例(Python 3.0+)<br>#!/usr/bin/python3</p><p># 第一个注释<br>print (“Hello, Python!”) # 第二个注释<br>执行以上代码，输出结果为：</p><p>Hello, Python!<br>多行注释可以用多个 # 号，还有 ‘’’ 和 “””：</p><p>实例(Python 3.0+)<br>#!/usr/bin/python3</p><p># 第一个注释<br># 第二个注释</p><p>‘’’<br>第三注释<br>第四注释<br>‘’’</p><p>“””<br>第五注释<br>第六注释<br>“””<br>print (“Hello, Python!”)<br>执行以上代码，输出结果为：</p><p>Hello, Python!<br>行与缩进<br>python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><p>实例(Python 3.0+)<br>if True:<br>print (“True”)<br>else:<br>print (“False”)<br>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p><p>实例<br>if True:<br>print (“Answer”)<br>print (“True”)<br>else:<br>print (“Answer”)<br>print (“False”) # 缩进不一致，会导致运行错误<br>以上程序由于缩进不一致，执行后会出现类似以下错误：</p><p>File “test.py”, line 6<br>print (“False”) # 缩进不一致，会导致运行错误<br>^<br>IndentationError: unindent does not match any outer indentation level<br>多行语句<br>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p><p>total = item_one + <br> item_two + <br> item_three<br>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p><p>total = [‘item_one’, ‘item_two’, ‘item_three’,<br>‘item_four’, ‘item_five’]<br>数字(Number)类型<br>python 中数字有四种类型：整数、布尔型、浮点数和复数。</p><p>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。<br>bool (布尔), 如 True。<br>float (浮点数), 如 1.23、3E-2<br>complex (复数), 如 1 + 2j、 1.1 + 2.2j<br>字符串(String)<br>python 中单引号和双引号使用完全相同。<br>使用三引号(‘’’或”””)可以指定一个多行字符串。</p><h2 id="转义符-‘-39"><a href="#转义符-‘-39" class="headerlink" title="转义符 ‘&#39;"></a>转义符 ‘&#39;</h2><p>反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n 会显示，并不是换行。<br>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为 this is string。<br>字符串可以用 + 运算符连接在一起，用 * 运算符重复。<br>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。<br>Python 中的字符串不能改变。<br>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。<br>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]<br>word = ‘字符串’<br>sentence = “这是一个句子。”<br>paragraph = “””这是一个段落，<br>可以由多行组成”””<br>实例(Python 3.0+)<br>#!/usr/bin/python3</p><p>str=’Runoob’</p><p>print(str) # 输出字符串<br>print(str[0:-1]) # 输出第一个到倒数第二个的所有字符<br>print(str[0]) # 输出字符串第一个字符<br>print(str[2:5]) # 输出从第三个开始到第五个的字符<br>print(str[2:]) # 输出从第三个开始后的所有字符<br>print(str[1:5:2]) # 输出从第二个开始到第五个且每隔两个的</p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>print(str * 2) # 输出字符串两次<br>print(str + ‘你好’) # 连接字符串</p><p>print(‘——————————‘)</p><p>print(‘hello\nrunoob’) # 使用反斜杠()+n 转义特殊字符<br>print(r’hello\nrunoob’) # 在字符串前面添加一个 r，表示原始字符串，不会发生转义<br>这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：</p><blockquote><blockquote><blockquote><p>print(‘\n’) # 输出空行</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>print(r’\n’) # 输出 \n<br>\n</p><p>以上实例输出结果：</p></blockquote></blockquote></blockquote><p>Runoob<br>Runoo<br>R<br>noo<br>noob<br>uo<br>RunoobRunoob<br>Runoob 你好</p><hr><p>hello<br>runoob<br>hello\nrunoob</p><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><p>记住：空行也是程序代码的一部分。</p><h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><p>执行下面的程序在按回车键后就会等待用户输入：</p><p>实例(Python 3.0+)<br>#!/usr/bin/python3</p><p>input(“\n\n 按下 enter 键后退出。”)<br>以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</p><h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>Python 可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：<br>实例(Python 3.0+)<br>#!/usr/bin/python3</p><p>import sys; x = ‘runoob’; sys.stdout.write(x + ‘\n’)<br>使用脚本执行以上代码，输出结果为：</p><h2 id="runoob"><a href="#runoob" class="headerlink" title="runoob"></a>runoob</h2><p>使用交互式命令行执行，输出结果为：</p><blockquote><blockquote><blockquote><p>import sys; x = ‘runoob’; sys.stdout.write(x + ‘\n’)<br>runoob<br>7<br>此处的 7 表示字符数。</p></blockquote></blockquote></blockquote><p>多个语句构成代码组<br>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像 if、while、def 和 class 这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><p>如下实例：</p><p>if expression :<br>suite<br>elif expression :<br>suite<br>else :<br>suite<br>print 输出<br>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</p><p>实例(Python 3.0+)<br>#!/usr/bin/python3</p><p>x=”a”<br>y=”b”</p><h1 id="换行输出"><a href="#换行输出" class="headerlink" title="换行输出"></a>换行输出</h1><p>print( x )<br>print( y )</p><p>print(‘———‘)</p><h1 id="不换行输出"><a href="#不换行输出" class="headerlink" title="不换行输出"></a>不换行输出</h1><p>print( x, end=” “ )<br>print( y, end=” “ )<br>print()<br>以上实例执行结果为：</p><p>a<br>b</p><hr><p>a b</p><h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><p>在 python 用 import 或者 from…import 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： import somemodule</p><p>从某个模块中导入某个函数,格式为： from somemodule import somefunction</p><p>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</p><p>将某个模块中的全部函数导入，格式为： from somemodule import *</p><h2 id="导入-sys-模块"><a href="#导入-sys-模块" class="headerlink" title="导入 sys 模块"></a>导入 sys 模块</h2><p>import sys<br>print(‘================Python import mode==========================’)<br>print (‘命令行参数为:’)<br>for i in sys.argv:<br>print (i)<br>print (‘\n python 路径为’,sys.path)<br>导入 sys 模块的 argv,path 成员<br>from sys import argv,path # 导入特定的成员</p><p>print(‘================python from import===================================’)<br>print(‘path:’,path) # 因为已经导入 path 成员，所以此处引用时不需要加 sys.path<br>命令行参数<br>很多程序可以执行一些操作来查看一些基本信息，Python 可以使用-h 参数查看各参数帮助信息：</p><p>$ python -h<br>usage: python [option] … [-c cmd | -m mod | file | -] [arg] …<br>Options and arguments (and corresponding environment variables):<br>-c cmd : program passed in as string (terminates option list)<br>-d : debug output from parser (also PYTHONDEBUG=x)<br>-E : ignore environment variables (such as PYTHONPATH)<br>-h : print this help message and exit</p><p>[ etc. ]</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pycharm</tag>
      
      <tag>服务端</tag>
      
      <tag>语言</tag>
      
      <tag>后端开发</tag>
      
      <tag>语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 环境搭建</title>
    <link href="/2021/03/11/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/03/11/python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Python3-环境搭建"><a href="#Python3-环境搭建" class="headerlink" title="Python3 环境搭建"></a>Python3 环境搭建</h1><p>本章节我们将向大家介绍如何在本地搭建 Python3 开发环境。</p><p>Python3 可应用于多平台包括 Windows、Linux 和 Mac OS X。</p><ul><li>Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, 等等。)</li><li>Win 9x/NT/2000</li><li>Macintosh (Intel, PPC, 68K)</li><li>OS/2</li><li>DOS (多个 DOS 版本)</li><li>PalmOS</li><li>Nokia 移动手机</li><li>Windows CE</li><li>Acorn/RISC OS</li><li>BeOS</li><li>Amiga</li><li>VMS/OpenVMS</li><li>QNX</li><li>VxWorks</li><li>Psion</li><li>Python 同样可以移植到 Java 和 .NET 虚拟机上。</li></ul><hr><h2 id="Python3-下载"><a href="#Python3-下载" class="headerlink" title="Python3 下载"></a>Python3 下载</h2><p>Python3 最新源码，二进制文档，新闻资讯等可以在 Python 的官网查看到：</p><p>Python 官网：<a href="https://www.python.org/">https://www.python.org/</a><br>你可以在以下链接中下载 Python 的文档，你可以下载 HTML、PDF 和 PostScript 等格式的文档。</p><h2 id="Python-文档下载地址：https-www-python-org-doc"><a href="#Python-文档下载地址：https-www-python-org-doc" class="headerlink" title="Python 文档下载地址：https://www.python.org/doc/"></a>Python 文档下载地址：<a href="https://www.python.org/doc/">https://www.python.org/doc/</a></h2><h2 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a>Python 安装</h2><p>Python 已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。</p><p>您需要下载适用于您使用平台的二进制代码，然后安装 Python。</p><p>如果您平台的二进制代码是不可用的，你需要使用 C 编译器手动编译源代码。</p><p>编译的源代码，功能上有更多的选择性， 为 Python 安装提供了更多的灵活性。</p><p>以下是各个平台安装包的下载地址：</p><p><strong>Source Code</strong> 可用于 Linux 上的安装。</p><p>以下为不同平台上安装 Python3 的方法。</p><h3 id="Unix-amp-Linux-平台安装-Python3"><a href="#Unix-amp-Linux-平台安装-Python3" class="headerlink" title="Unix &amp; Linux 平台安装 Python3:"></a><strong>Unix &amp; Linux 平台安装 Python3:</strong></h3><p>以下为在 Unix &amp; Linux 平台上安装 Python 的简单步骤：</p><ul><li>打开 WEB 浏览器访问 <a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></li><li>选择适用于 Unix/Linux 的源码压缩包。</li><li>下载及解压压缩包 Python-3.x.x.tgz，3.x.x 为你下载的对应版本号。</li><li>如果你需要自定义一些选项修改 Modules/Setup</li></ul><p>以 <strong>Python3.6.1</strong> 版本为例：</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># tar -zxvf Python-3.6.1.tgz</span><br><span class="hljs-meta"># cd Python-3.6.1</span><br><span class="hljs-meta"># ./configure</span><br><span class="hljs-meta"># make &amp;&amp; make install</span><br></code></pre></div></td></tr></table></figure><p>检查 Python3 是否正常可用：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-comment"># python3 -V</span><br><span class="hljs-attribute">Python</span> <span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h3 id="Window-平台安装-Python"><a href="#Window-平台安装-Python" class="headerlink" title="Window 平台安装 Python:"></a><strong>Window 平台安装 Python:</strong></h3><p>以下为在 Window 平台上安装 Python 的简单步骤。</p><p>打开 WEB 浏览器访问 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> ，一般就下载 executable installer，x86 表示是 32 位机子的，x86-64 表示 64 位机子的。</p><p>记得勾选 <strong>Add Python 3.6 to PATH</strong>。<br>按 <code>Win+R</code> 键，输入 cmd 调出命令提示符，输入 python:<br>也可以在开始菜单中搜索 <strong>IDLE</strong>：</p><h3 id="MAC-平台安装-Python"><a href="#MAC-平台安装-Python" class="headerlink" title="MAC 平台安装 Python:"></a><strong>MAC 平台安装 Python</strong>:</h3><p>MAC 系统都自带有 Python2.7 环境，你可以在链接 <a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a> 上下载最新版安装 Python 3.x。</p><h2 id="你也可以参考源码安装的方式来安装。"><a href="#你也可以参考源码安装的方式来安装。" class="headerlink" title="你也可以参考源码安装的方式来安装。"></a>你也可以参考源码安装的方式来安装。</h2><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a><strong>环境变量配置</strong></h3><p>程序和可执行文件可以在许多目录，而这些路径很可能不在操作系统提供可执行文件的搜索路径中。</p><p>path(路径)存储在环境变量中，这是由操作系统维护的一个命名的字符串。这些变量包含可用的命令行解释器和其他程序的信息。</p><p>Unix 或 Windows 中路径变量为 PATH（UNIX 区分大小写，Windows 不区分大小写）。</p><p>在 Mac OS 中，安装程序过程中改变了 python 的安装路径。如果你需要在其他目录引用 Python，你必须在 path 中添加 Python 目录。</p><h4 id="在-Unix-Linux-设置环境变量"><a href="#在-Unix-Linux-设置环境变量" class="headerlink" title="在 Unix/Linux 设置环境变量"></a><strong>在 Unix/Linux 设置环境变量</strong></h4><ul><li>在 <strong>csh shell</strong>: 输入</li></ul><p class="note note-primary">setenv PATH "$PATH:/usr/local/bin/python"</p><p>, 按下 <strong>Enter</strong>。</p><ul><li>在 <strong>bash shell (Linux)</strong> 输入 :</li></ul><p class="note note-primary">export PATH="$PATH:/usr/local/bin/python"</p><p>按下 <strong>Enter</strong> 。</p><ul><li>在 <strong>sh 或者 ksh shell 输入</strong>:</li></ul><p class="note note-primary">PATH="$PATH:/usr/local/bin/python"</p><p>按下 <strong>Enter</strong>。</p><p>注意: /usr/local/bin/python 是 Python 的安装目录。</p><h3 id="在-Windows-设置环境变量"><a href="#在-Windows-设置环境变量" class="headerlink" title="在 Windows 设置环境变量"></a><strong>在 Windows 设置环境变量</strong></h3><p>在环境变量中添加 Python 目录：</p><p><strong>在命令提示框中(cmd) :</strong> 输入</p><div class="hljs code-wrapper"><pre><code>path=%path%;C:\Python</code></pre></div><p>按下”Enter”。</p><p><strong>注意</strong>: C:\Python 是 Python 的安装目录。</p><p>也可以通过以下方式设置：</p><ul><li>右键点击”计算机”，然后点击”属性”</li><li>然后点击”高级系统设置”</li><li>选择”系统变量”窗口下面的”Path”,双击即可！</li><li>然后在”Path”行，添加 python 安装路径即可(我的 D:\Python32)，所以在后面，添加该路径即可。 ps：记住，路径直接用分号”；”隔开！</li><li>最后设置成功以后，在 cmd 命令行，输入命令”python”，就可以有相关显示。</li></ul><h2 id="Python-环境变量"><a href="#Python-环境变量" class="headerlink" title="Python 环境变量"></a><strong>Python 环境变量</strong></h2><p>下面几个重要的环境变量，它应用于 Python：</p><table><thead><tr><th>变量名</th><th align="center">描述</th></tr></thead><tbody><tr><td>PYTHONPATH</td><td align="center">PYTHONPATH 是 Python 搜索路径，默认我们 import 的模块都会从 PYTHONPATH 里面寻找。</td></tr><tr><td>PYTHONSTARTUP</td><td align="center">Python 启动后，先寻找 PYTHONSTARTUP 环境变量，然后执行此变量指定的文件中的代码。</td></tr><tr><td>PYTHONCASEOK</td><td align="center">加入 PYTHONCASEOK 的环境变量, 就会使 python 导入模块的时候不区分大小写.</td></tr><tr><td>PYTHONHOME</td><td align="center">另一种模块搜索路径。它通常内嵌于的 PYTHONSTARTUP 或 PYTHONPATH 目录中，使得两个模块库更容易切换。</td></tr></tbody></table><p>运行 Python<br>有三种方式可以运行 Python：</p><p>1、交互式解释器：<br>你可以通过命令行窗口进入 python 并开在交互式解释器中开始编写 Python 代码。</p><p>你可以在 Unix，DOS 或任何其他提供了命令行或者 shell 的系统进行 python 编码工作。</p><p>$ python # Unix/Linux</p><p>或者</p><p>C:&gt;python # Windows/DOS<br>以下为 Python 命令行参数：</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-d在解析时显示调试信息</span><br><br><span class="hljs-deletion">-O生成优化代码 ( .pyo 文件 )</span><br><br><span class="hljs-deletion">-S启动时不引入查找Python路径的位置</span><br><br><span class="hljs-deletion">-V输出Python版本号</span><br><br><span class="hljs-deletion">-X从 1.6版本之后基于内建的异常（仅仅用于字符串）已过时。</span><br><br><span class="hljs-deletion">-c cmd执行 Python 脚本，并将运行结果作为 cmd 字符串。</span><br><br>file在给定的python文件执行python脚本。<br></code></pre></div></td></tr></table></figure><p>2、命令行脚本<br>在你的应用程序中通过引入解释器可以在命令行中执行 Python 脚本，如下所示：</p><p>$ python script.py # Unix/Linux</p><p>或者</p><p>C:&gt;python script.py # Windows/DOS<br>注意：在执行脚本时，请检查脚本是否有可执行权限。</p><p>3、集成开发环境（IDE：Integrated Development Environment）: PyCharm<br>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。</p><p>PyCharm 功能 : 调试、语法高亮、Project 管理、代码跳转、智能提示、自动完成、单元测试、版本控制……</p><p>PyCharm 下载地址 : <a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a></p><p>PyCharm 安装地址：<a href="http://www.runoob.com/w3cnote/pycharm-windows-install.html">http://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p><p>Professional（专业版，收费）：完整的功能。</p><p>Community（社区版是，免费）：阉割版的专业版。</p><p>PyCharm 界面：</p><p>安装 PyCharm 中文插件，打开菜单栏 File，选择 Settings，然后选 Pulgins，点 Marketplace，搜索 chinese，然后点击 install 安装：</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pycharm</tag>
      
      <tag>服务端</tag>
      
      <tag>语言</tag>
      
      <tag>后端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3 简介</title>
    <link href="/2021/03/09/python%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/03/09/python%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Python3-简介"><a href="#Python3-简介" class="headerlink" title="Python3 简介"></a>Python3 简介</h2><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p><p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p><ul><li><p>Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于 PHP 和 Perl 语言。</p></li><li><p>Python 是交互式语言： 这意味着，您可以在一个 Python 提示符 &gt;&gt;&gt; 后直接执行代码。</p></li><li><p>Python 是面向对象语言: 这意味着 Python 支持面向对象的风格或代码封装在对象的编程技术。</p></li><li><p>Python 是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p></li></ul><h2 id="Python-发展历史"><a href="#Python-发展历史" class="headerlink" title="Python 发展历史"></a>Python 发展历史</h2><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p><p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p><p>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。</p><p>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p><p>Python 2.0 于 2000 年 10 月 16 日发布，增加了实现完整的垃圾回收，并且支持 Unicode。</p><p>Python 3.0 于 2008 年 12 月 3 日发布，此版不完全兼容之前的 Python 源代码。不过，很多新特性后来也被移植到旧的 Python 2.6/2.7 版本。</p><p>Python 3.0 版本，常被称为 Python 3000，或简称 Py3k。相对于 Python 的早期版本，这是一个较大的升级。</p><p>Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。</p><h2 id="Python-特点"><a href="#Python-特点" class="headerlink" title="Python 特点"></a>Python 特点</h2><ul><li><p>1.易于学习：Python 有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</p></li><li><p>2.易于阅读：Python 代码定义的更清晰。</p></li><li><p>3.易于维护：Python 的成功在于它的源代码是相当容易维护的。</p></li><li><p>4.一个广泛的标准库：Python 的最大的优势之一是丰富的库，跨平台的，在 UNIX，Windows 和 Macintosh 兼容很好。</p></li><li><p>5.互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</p></li><li><p>6.可移植：基于其开放源代码的特性，Python 已经被移植（也就是使其工作）到许多平台。</p></li><li><p>7.可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用 C 或 C++完成那部分程序，然后从你的 Python 程序中调用。</p></li><li><p>8.数据库：Python 提供所有主要的商业数据库的接口。</p></li><li><p>9.GUI 编程：Python 支持 GUI 可以创建和移植到许多系统调用。</p></li><li><p>10.可嵌入: 你可以将 Python 嵌入到 C/C++程序，让你的程序的用户获得”脚本化”的能力。</p></li></ul><h2 id="Python-应用"><a href="#Python-应用" class="headerlink" title="Python 应用"></a>Python 应用</h2><ul><li>Youtube - 视频社交网站</li><li>Reddit - 社交分享网站</li><li>Dropbox - 文件分享服务</li><li>豆瓣网 - 图书、唱片、电影等文化产品的资料数据库网站</li><li>知乎 - 一个问答网站</li><li>果壳 - 一个泛科技主题网站</li><li>Bottle - Python 微 Web 框架</li><li>EVE - 网络游戏 EVE 大量使用 Python 进行开发</li><li>Blender - 使用 Python 作为建模工具与 GUI 语言的开源- 3D 绘图软件</li><li>Inkscape - 一个开源的 SVG 矢量图形编辑器。</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络应用层协议</title>
    <link href="/2021/03/05/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/03/05/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="网络应用层协议"><a href="#网络应用层协议" class="headerlink" title="网络应用层协议"></a>网络应用层协议</h2><h3 id="DNS-域名解析系统"><a href="#DNS-域名解析系统" class="headerlink" title="DNS 域名解析系统"></a>DNS 域名解析系统</h3><ul><li>建议 IP 地址与域名之间的映射关系</li><li>将域名解析为 IP 地址</li><li>将 IP <span class="label label-primary">解析</span>为域名</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg基础教程</title>
    <link href="/2021/03/03/ffmpeg%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <url>/2021/03/03/ffmpeg%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="ffmpeg-基础教程"><a href="#ffmpeg-基础教程" class="headerlink" title="ffmpeg 基础教程"></a>ffmpeg 基础教程</h1><hr><h4 id="1、把-mp4-格式转换-mov-格式"><a href="#1、把-mp4-格式转换-mov-格式" class="headerlink" title="1、把 mp4 格式转换 mov 格式"></a>1、把 mp4 格式转换 mov 格式</h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">语法：<br>ffmpeg -i <span class="hljs-keyword">input</span>.mp4 -codec <span class="hljs-keyword">copy</span> output.avi<br>参数说明：<br>-i 表示设定输入文件路径<br>-codec <span class="hljs-keyword">copy</span> （表示保持音视频编码与字幕编码不变，不需要重新编码。还可以简写 –c <span class="hljs-keyword">copy</span>）<br>注意：如果不加-codec <span class="hljs-keyword">copy</span> 参数，处理速度会很慢，（默认会进行重新编码，会消耗 CPU 资源）。<br></code></pre></div></td></tr></table></figure><hr><h4 id="2、为-mov-视频格式添加字幕（仅在-windows-系统下，速度快）"><a href="#2、为-mov-视频格式添加字幕（仅在-windows-系统下，速度快）" class="headerlink" title="2、为 mov 视频格式添加字幕（仅在 windows 系统下，速度快）"></a>2、为 mov <p class="note note-primary">视频</p>格式添加字幕（仅在 windows 系统下，速度快）</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">语法：<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mov</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.srt</span> –c:v copy –c:<span class="hljs-selector-tag">a</span> copy -c:s mov_text outfile.mov<br><br>参数说明：<br>-<span class="hljs-selector-tag">i</span> 表示设定输入文件路径<br>-c:v copy 表示保持视频编码不变，不需要重新编码<br>-c:<span class="hljs-selector-tag">a</span> copy 表示保持音频编码不变，不需要重新编码<br>-c:s 表示字幕格式 mov_text<br></code></pre></div></td></tr></table></figure><hr><h4 id="3、添加水印"><a href="#3、添加水印" class="headerlink" title="3、添加水印"></a>3、添加水印</h4><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">在视频左上角添加图片水印<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -i boyunt.png -filter_complex overlay=<span class="hljs-number">10</span>:<span class="hljs-number">10</span> <span class="hljs-built_in">output</span>.mp4<br>在视频左下角添加图片水印<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -i boyunt.png -filter_complex overlay=<span class="hljs-number">10</span>:main_h-overlay_h<span class="hljs-number">-10</span> <span class="hljs-built_in">output</span>.mp4<br>在视频右上角添加图片水印<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -i boyunt.png -filter_complex overlay=main_w-overlay_w<span class="hljs-number">-10</span>:<span class="hljs-number">10</span> <span class="hljs-built_in">output</span>.mp4<br>在视频右下角添加图片水印<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -i boyunt.png -filter_complex overlay=main_w-overlay_w<span class="hljs-number">-10</span>:main_h-overlay_h<span class="hljs-number">-10</span> <span class="hljs-built_in">output</span>.mp4<br>参数解析<br>overlay：水印的位置，距离屏幕左侧的距离＊距离屏幕上侧的距离；mainW 主视频宽度， mainH 主视频高度，overlayW 水印宽度，overlayH 水印高度;<br>-filter_complex: 相比-vf, filter_complex 适合开发复杂的滤镜功能，如同时对视频进行裁剪并旋转。参数之间使用逗号（，）隔开即可<br>main_w:视频宽度<br>overlay_w: 要添加的图片水印宽度<br>main_h : 视频高度<br>overlay_h:要添加的图片水印宽度<br>在视频左上角添加一条白色字体的文字水印<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -vf <span class="hljs-string">&quot;drawtext=fontfile=simhei.ttf: text=博云天:x=10:y=10:fontsize=24:fontcolor=white:shadowy=2&quot;</span> <span class="hljs-built_in">output</span>.mp4<br>参数说明<br>fontfile:字体类型<br>text:要添加的文字内容<br>fontsize:字体大小<br>fontcolor：字体颜色<br></code></pre></div></td></tr></table></figure><h4 id="4、视频加速"><a href="#4、视频加速" class="headerlink" title="4、视频加速"></a>4、视频加速</h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">ffmpeg -i video2.mp4 -vf <span class="hljs-attribute">setpts</span>=PTS/15 -af <span class="hljs-attribute">atempo</span>=15 output.mp4<br>视频减速<br>ffmpeg -i video2.mp4 -vf <span class="hljs-attribute">setpts</span>=4*PTS output.mp4<br>参数说明<br>–vf <span class="hljs-attribute">setpts</span>=PTS/15 表示 15 倍快速播放视频<br>–af <span class="hljs-attribute">atempo</span>=15 表示 15 倍快速播放音频<br>备注：如果视频只想快进播放，不想快进播放声音，可以把–af <span class="hljs-attribute">atempo</span>=15 去掉即可。<br>-vf <span class="hljs-attribute">setpts</span>=4*PTS 表示 4 倍慢速播放视频<br></code></pre></div></td></tr></table></figure><hr><h4 id="5、视频切割命令："><a href="#5、视频切割命令：" class="headerlink" title="5、视频切割命令："></a>5、视频切割命令：</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -ss <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> -i <span class="hljs-number">11</span>.mp<span class="hljs-number">4</span> -to <span class="hljs-number">00</span>:<span class="hljs-number">30</span>:<span class="hljs-number">00</span> -c copy <span class="hljs-number">100</span>.mp<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="6、值得注意的是，ffmpeg-为了加速，会使用关键帧技术，-所以有时剪切出来的结果在起止时间上未必准确。-通常来说，把-ss-选项放在-i-之前，会使用关键帧技术，节约处理的时间；-把-ss-选项放在-i-之后，则不使用关键帧技术，花费的时间会越长。"><a href="#6、值得注意的是，ffmpeg-为了加速，会使用关键帧技术，-所以有时剪切出来的结果在起止时间上未必准确。-通常来说，把-ss-选项放在-i-之前，会使用关键帧技术，节约处理的时间；-把-ss-选项放在-i-之后，则不使用关键帧技术，花费的时间会越长。" class="headerlink" title="6、值得注意的是，ffmpeg 为了加速，会使用关键帧技术， 所以有时剪切出来的结果在起止时间上未必准确。 通常来说，把 -ss 选项放在 -i 之前，会使用关键帧技术，节约处理的时间； 把 -ss 选项放在 -i 之后，则不使用关键帧技术，花费的时间会越长。"></a>6、值得注意的是，ffmpeg 为了加速，会使用关键帧技术， 所以有时剪切出来的结果在起止时间上未必准确。 通常来说，把 -ss 选项放在 -i 之前，会使用关键帧技术，节约处理的时间； 把 -ss 选项放在 -i 之后，则不使用关键帧技术，花费的时间会越长。</h4><hr><h4 id="7、音频与视频合并命令："><a href="#7、音频与视频合并命令：" class="headerlink" title="7、音频与视频合并命令："></a>7、音频与视频合并命令：</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">无声音视频与音频合并<br>ffmpeg -<span class="hljs-selector-tag">i</span> video2<span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">audio</span><span class="hljs-selector-class">.mp3</span> -codec copy output.mp4<br><br>保留视频声音和音频声音（仅限于在 Windows 系统使用生效）<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">audio</span><span class="hljs-selector-class">.mp3</span> -filter_complex <span class="hljs-string">&quot;[0:a][1:a]amerge=inputs=2[a]&quot;</span> -map <span class="hljs-number">0</span>:v -map <span class="hljs-string">&quot;[a]&quot;</span> -c:v copy -c:<span class="hljs-selector-tag">a</span> libvorbis -ac <span class="hljs-number">2</span> -shortest out. mp4<br></code></pre></div></td></tr></table></figure><hr><h4 id="8、Mac-系统下为视频嵌入字幕-处理速度慢"><a href="#8、Mac-系统下为视频嵌入字幕-处理速度慢" class="headerlink" title="8、Mac 系统下为视频嵌入字幕(处理速度慢)"></a>8、Mac 系统下为视频嵌入字幕(处理速度慢)</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mkv</span> -vf subtitles=<span class="hljs-number">1</span><span class="hljs-selector-class">.srt</span> outfile.mkv<br><br>参数说明<br>subtitles= 输入字幕完整路径<br></code></pre></div></td></tr></table></figure><hr><h4 id="9、多个音频文件拼接和剪切"><a href="#9、多个音频文件拼接和剪切" class="headerlink" title="9、多个音频文件拼接和剪切"></a>9、多个音频文件拼接和剪切</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">(<span class="hljs-number">1</span>)ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&quot;concat:123.mp3|124.mp3&quot;</span> -c:<span class="hljs-selector-tag">a</span> copy output.mp3<br><br>(<span class="hljs-number">2</span>)ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">00125</span><span class="hljs-selector-class">.mp3</span> -vn -acodec copy -ss <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> -t <span class="hljs-number">00</span>:<span class="hljs-number">03</span>:<span class="hljs-number">27</span> <span class="hljs-number">02</span>.mp3<br></code></pre></div></td></tr></table></figure><hr><h4 id="10、调节音量大小"><a href="#10、调节音量大小" class="headerlink" title="10、调节音量大小"></a>10、调节音量大小</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">（<span class="hljs-number">1</span>）、音量提升 <span class="hljs-number">30</span> 分贝<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp3</span> -af volume=<span class="hljs-number">30</span>dB output.mp3<br><br>（<span class="hljs-number">2</span>）、音量降低 <span class="hljs-number">30</span> 分贝<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp3</span> -af volume=-<span class="hljs-number">30</span>dB output.mp3<br></code></pre></div></td></tr></table></figure><hr><h4 id="11、Mac-系统下视频拼接："><a href="#11、Mac-系统下视频拼接：" class="headerlink" title="11、Mac 系统下视频拼接："></a>11、Mac 系统下视频拼接：</h4><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">方法一：<br>（<span class="hljs-number">1</span>）、首先把 mp4 格式转换为 <span class="hljs-keyword">ts</span> 格式<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -<span class="hljs-keyword">c</span> <span class="hljs-keyword">copy</span> -bsf:v h264_mp4toannexb -<span class="hljs-keyword">f</span> mpegts out.<span class="hljs-keyword">ts</span><br><br>（<span class="hljs-number">2</span>）、再把 <span class="hljs-keyword">ts</span> 格式拼接<br>ffmpeg –i “conca<span class="hljs-variable">t:input</span>.<span class="hljs-keyword">ts</span>|<span class="hljs-built_in">input</span>.<span class="hljs-keyword">ts</span>” -<span class="hljs-keyword">c</span> <span class="hljs-keyword">copy</span> out.<span class="hljs-keyword">ts</span><br><br>（<span class="hljs-number">3</span>）、把 <span class="hljs-keyword">ts</span> 格式转换为 mp4 格式<br>ffmpeg -i <span class="hljs-built_in">input</span>.<span class="hljs-keyword">ts</span> -<span class="hljs-keyword">c</span> <span class="hljs-keyword">copy</span> out.mp4<br><br>方法二：<br>多个视频拼接<br>ffmpeg -i <span class="hljs-built_in">input</span>.mp4 -i <span class="hljs-built_in">input</span>.mp4 -filter_complex <span class="hljs-string">&quot;[0:v:0][0:a:0][1:v:0][1:a:0]concat=n=2:v=1:a=1[outv][outa]&quot;</span> -<span class="hljs-keyword">map</span> <span class="hljs-string">&quot;[outv]&quot;</span> -<span class="hljs-keyword">map</span> <span class="hljs-string">&quot;[outa]&quot;</span> out.mp4<br><br>参数说明：<br>n=<span class="hljs-number">2</span> 表示有 <span class="hljs-number">2</span> 个输入视频，v=<span class="hljs-number">1</span> 表示每个视频都有 <span class="hljs-number">1</span> 个视频流，<span class="hljs-keyword">a</span>=<span class="hljs-number">1</span> 表示每个视频音频流，过滤器将这些段连接起来，并产生两个输出流。[outv]和[outa]是这些输出流的名称。然后，您可以在其他过滤器中重新使用这些流。<br></code></pre></div></td></tr></table></figure><hr><h4 id="12、视频提取音频"><a href="#12、视频提取音频" class="headerlink" title="12、视频提取音频"></a>12、视频提取音频</h4><figure class="highlight objectivec"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs objectivec">ffmpeg -i <span class="hljs-keyword">out</span>.mp4 -vn -acodec <span class="hljs-keyword">copy</span> <span class="hljs-keyword">out</span>.mp3<br>注意：如果原音频流不是 mp3，则去掉-acodec <span class="hljs-keyword">copy</span> 即可。<br></code></pre></div></td></tr></table></figure><hr><h4 id="13、视频转-GIF"><a href="#13、视频转-GIF" class="headerlink" title="13、视频转 GIF"></a>13、视频转 GIF</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">ffmpeg -ss <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> -t <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">10</span> -<span class="hljs-selector-tag">i</span> out<span class="hljs-selector-class">.mp4</span> -s <span class="hljs-number">320</span>x240 -f gif -r <span class="hljs-number">1</span> out.gif<br>注意：-s 分辨率 -f 格式 -r 帧<br></code></pre></div></td></tr></table></figure><hr><h4 id="14、利用-ffmpeg-录屏及录音："><a href="#14、利用-ffmpeg-录屏及录音：" class="headerlink" title="14、利用 ffmpeg 录屏及录音："></a>14、利用 ffmpeg 录屏及录音：</h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">（<span class="hljs-number">1</span>）、录屏：<br>ffmpeg -f avfoundation -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span> -r <span class="hljs-number">30</span> out.yuv<br>-f:指定使用 avfoundation 采集数据<br>-<span class="hljs-selector-tag">i</span>:指定从哪儿采集数据，它是一个文件索引导<br>-r:指定帧率<br>播放录屏：ffplay -s <span class="hljs-number">2560</span>x1600 -pix_fmt uyvy out.yuv<br>-s:分辨率<br>-pix_fmt:视频格式<br>查询录屏和录音的序号：<br>ffmpeg -f avfoundation -list_devices true -<span class="hljs-selector-tag">i</span> <span class="hljs-string">&quot;&quot;</span><br><br>(<span class="hljs-number">2</span>)、录音：<br>ffmpeg -f avfoundation -<span class="hljs-selector-tag">i</span> :<span class="hljs-number">0</span> out.wav<br></code></pre></div></td></tr></table></figure><hr><h4 id="15、ffmpeg-i-null-ape-ar-44100-ac-2-ab-16k-vol-50-f-mp3-null-mp3"><a href="#15、ffmpeg-i-null-ape-ar-44100-ac-2-ab-16k-vol-50-f-mp3-null-mp3" class="headerlink" title="15、ffmpeg -i null.ape -ar 44100 -ac 2 -ab 16k -vol 50 -f mp3 null.mp3"></a>15、ffmpeg -i null.ape -ar 44100 -ac 2 -ab 16k -vol 50 -f mp3 null.mp3</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">解释：-i 代表输入参数<br><span class="hljs-deletion">-acodec aac（音频编码用 AAC）</span><br><span class="hljs-deletion">-ar 设置音频采样频率</span><br><span class="hljs-deletion">-ac 设置音频通道数</span><br><span class="hljs-deletion">-ab 设定声音比特率</span><br><span class="hljs-deletion">-vol &lt;百分比&gt; 设定音量</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ffmpeg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
